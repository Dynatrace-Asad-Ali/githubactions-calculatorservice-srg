name: CI/CD with Dynatrace Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        type: boolean
        default: false

env:
  DT_TENANT_URL: ${{ secrets.DT_TENANT_URL }}
  DT_PAAS_TOKEN: ${{ secrets.DT_PAAS_TOKEN }}
  DT_TENANTTOKEN: ${{ secrets.DT_TENANTTOKEN }}
  DT_TENANT: ${{ secrets.DT_TENANT }}
  JAVA_VERSION: '17'

jobs:
   checkout-and-build:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    name: CI/CD with Dynatrace Monitoring

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Download application artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Download Dynatrace OneAgent
        run: |
          mkdir -p $HOME/dynatrace/oneagent
          wget -O $HOME/dynatrace/oneagent.zip \
            "${{ env.DT_TENANT_URL }}/api/v1/deployment/installer/agent/unix/paas/latest?flavor=default&include=java&Api-Token=${{ env.DT_PAAS_TOKEN }}"
          unzip -d $HOME/dynatrace/oneagent $HOME/dynatrace/oneagent.zip
          echo "✅ Dynatrace OneAgent downloaded"

      - name: Start Spring Boot application with Dynatrace
        run: |
          export DT_HOME=$HOME/dynatrace/oneagent
          export LD_PRELOAD=$HOME/dynatrace/oneagent/agent/lib64/liboneagentproc.so
          export DT_TENANT=${{ env.DT_TENANT }}
          export DT_LOGSTREAM=stdout
          export DT_LOGLEVELCON=INFO
          export DT_TAGS="environment=performance-test,build=${{ github.run_number }},test_type=k6,source=github-actions"
          export DT_CUSTOM_PROP="BUILD_NUMBER=${{ github.run_number }} COMMIT_SHA=${{ github.sha }} TEST_TYPE=k6_performance"
          
          # Start application in background
          nohup java -jar target/*.jar > app.log 2>&1 &
          APP_PID=$!
          echo $APP_PID > app.pid
          echo "Started application with PID: $APP_PID"
          
          # Wait for application to be ready
          echo "⏳ Waiting for application to start..."
          RETRY_COUNT=0
          MAX_RETRIES=60
          
          until curl -f http://localhost:8080/health > /dev/null 2>&1; do
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "❌ Application failed to start within timeout"
              echo "=== Application Log ==="
              cat app.log
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
            echo "Attempt $RETRY_COUNT/$MAX_RETRIES..."
            sleep 2
          done
          
          echo "✅ Application is ready and healthy"
          
          # Verify endpoints are responding
          echo "🔍 Verifying endpoints..."
          curl -s http://localhost:8080/ || echo "Warning: Home endpoint issue"
          curl -s http://localhost:8080/api/users || echo "Warning: Users endpoint issue"
          curl -s "http://localhost:8080/api/calculator/add?a=5&b=3" || echo "Warning: Calculator endpoint issue"

      - name: Install k6
        run: |
          echo "📦 Installing k6..."
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg \
            --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | \
            sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          k6 version

      - name: Create k6 load test script
        run: |
          cat > k6-load-test.js <<'EOF'
          import http from 'k6/http';
          import { check, group, sleep } from 'k6';
          import { Rate, Trend, Counter, Gauge } from 'k6/metrics';
          
          // Custom metrics
          const errorRate = new Rate('errors');
          const calculatorDuration = new Trend('calculator_duration');
          const userApiDuration = new Trend('user_api_duration');
          const requestCount = new Counter('request_count');
          const activeUsers = new Gauge('active_users');
          
          export const options = {
            stages: [
              { duration: '30s', target: 10 },   // Warm up
              { duration: '1m', target: 50 },    // Ramp to 50 users
              { duration: '2m', target: 50 },    // Stay at 50 users
              { duration: '30s', target: 100 },  // Spike to 100
              { duration: '1m', target: 100 },   // Stay at 100
              { duration: '30s', target: 0 },    // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<500', 'p(99)<1000'],
              http_req_failed: ['rate<0.05'],
              errors: ['rate<0.1'],
              checks: ['rate>0.95'],
              'http_req_duration{endpoint:calculator}': ['p(95)<300'],
              'http_req_duration{endpoint:users}': ['p(95)<400'],
            },
          };
          
          const BASE_URL = 'http://localhost:8080';
          
          function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
          }
          
          export function setup() {
            console.log('🚀 Starting k6 load test...');
            console.log(`Base URL: ${BASE_URL}`);
            
            // Verify application is running
            const healthRes = http.get(`${BASE_URL}/health`);
            if (healthRes.status !== 200) {
              throw new Error('Application health check failed');
            }
            
            return { startTime: new Date().toISOString() };
          }
          
          export default function(data) {
            activeUsers.add(1);
            
            const scenario = Math.random();
            
            if (scenario < 0.35) {
              testCalculator();
            } else if (scenario < 0.70) {
              testUsers();
            } else {
              testMixed();
            }
            
            sleep(getRandomInt(1, 3));
            activeUsers.add(-1);
          }
          
          function testCalculator() {
            group('Calculator Operations', () => {
              const startTime = Date.now();
              const a = getRandomInt(1, 100);
              const b = getRandomInt(1, 100);
              
              // Addition
              const addRes = http.get(`${BASE_URL}/api/calculator/add?a=${a}&b=${b}`, {
                tags: { endpoint: 'calculator', operation: 'add' },
              });
              const addCheck = check(addRes, {
                'add status 200': (r) => r.status === 200,
                'add result correct': (r) => {
                  try {
                    return JSON.parse(r.body).result === (a + b);
                  } catch (e) {
                    return false;
                  }
                },
              });
              errorRate.add(!addCheck);
              
              sleep(0.5);
              
              // Subtraction
              const subRes = http.get(`${BASE_URL}/api/calculator/subtract?a=${a}&b=${b}`, {
                tags: { endpoint: 'calculator', operation: 'subtract' },
              });
              check(subRes, {
                'subtract status 200': (r) => r.status === 200,
                'subtract result correct': (r) => {
                  try {
                    return JSON.parse(r.body).result === (a - b);
                  } catch (e) {
                    return false;
                  }
                },
              });
              
              sleep(0.5);
              
              // Multiplication
              const mulRes = http.get(`${BASE_URL}/api/calculator/multiply?a=${a}&b=${b}`, {
                tags: { endpoint: 'calculator', operation: 'multiply' },
              });
              check(mulRes, {
                'multiply status 200': (r) => r.status === 200,
              });
              
              sleep(0.5);
              
              // Division
              const divisor = getRandomInt(1, 10);
              const divRes = http.get(`${BASE_URL}/api/calculator/divide?a=${a}&b=${divisor}`, {
                tags: { endpoint: 'calculator', operation: 'divide' },
              });
              check(divRes, {
                'divide status 200': (r) => r.status === 200,
              });
              
              // Test error handling - divide by zero
              const divZeroRes = http.get(`${BASE_URL}/api/calculator/divide?a=${a}&b=0`, {
                tags: { endpoint: 'calculator', operation: 'divide-error' },
              });
              check(divZeroRes, {
                'divide by zero returns 400': (r) => r.status === 400,
                'divide by zero has error': (r) => {
                  try {
                    return JSON.parse(r.body).error !== undefined;
                  } catch (e) {
                    return false;
                  }
                },
              });
              
              calculatorDuration.add(Date.now() - startTime);
              requestCount.add(5);
            });
          }
          
          function testUsers() {
            group('User CRUD Operations', () => {
              const startTime = Date.now();
              
              // Get all users
              const getAllRes = http.get(`${BASE_URL}/api/users`, {
                tags: { endpoint: 'users', operation: 'getAll' },
              });
              const getAllCheck = check(getAllRes, {
                'get all users 200': (r) => r.status === 200,
                'get all returns array': (r) => {
                  try {
                    return Array.isArray(JSON.parse(r.body));
                  } catch (e) {
                    return false;
                  }
                },
              });
              errorRate.add(!getAllCheck);
              
              sleep(0.5);
              
              // Create user
              const timestamp = Date.now();
              const createPayload = JSON.stringify({
                name: `K6User${timestamp}`,
                email: `k6test${timestamp}@example.com`,
              });
              
              const createRes = http.post(`${BASE_URL}/api/users`, createPayload, {
                headers: { 'Content-Type': 'application/json' },
                tags: { endpoint: 'users', operation: 'create' },
              });
              
              let userId = null;
              const createCheck = check(createRes, {
                'create user 201': (r) => r.status === 201,
                'create returns user': (r) => {
                  try {
                    const user = JSON.parse(r.body);
                    userId = user.id;
                    return userId !== undefined && user.name !== undefined;
                  } catch (e) {
                    return false;
                  }
                },
              });
              errorRate.add(!createCheck);
              
              if (userId) {
                sleep(0.5);
                
                // Get user by ID
                const getRes = http.get(`${BASE_URL}/api/users/${userId}`, {
                  tags: { endpoint: 'users', operation: 'getById' },
                });
                check(getRes, {
                  'get user by id 200': (r) => r.status === 200,
                  'get returns correct user': (r) => {
                    try {
                      return JSON.parse(r.body).id === userId;
                    } catch (e) {
                      return false;
                    }
                  },
                });
                
                sleep(0.5);
                
                // Update user
                const updatePayload = JSON.stringify({
                  name: `UpdatedUser${userId}`,
                  email: `updated${userId}@example.com`,
                });
                
                const updateRes = http.put(`${BASE_URL}/api/users/${userId}`, updatePayload, {
                  headers: { 'Content-Type': 'application/json' },
                  tags: { endpoint: 'users', operation: 'update' },
                });
                check(updateRes, {
                  'update user 200': (r) => r.status === 200,
                  'update returns updated': (r) => {
                    try {
                      return JSON.parse(r.body).name.includes('Updated');
                    } catch (e) {
                      return false;
                    }
                  },
                });
                
                sleep(0.5);
                
                // Delete user
                const deleteRes = http.del(`${BASE_URL}/api/users/${userId}`, {
                  tags: { endpoint: 'users', operation: 'delete' },
                });
                check(deleteRes, {
                  'delete user 204': (r) => r.status === 204,
                });
                
                sleep(0.5);
                
                // Verify deletion
                const getDeletedRes = http.get(`${BASE_URL}/api/users/${userId}`, {
                  tags: { endpoint: 'users', operation: 'verify-delete' },
                });
                check(getDeletedRes, {
                  'deleted user returns 404': (r) => r.status === 404,
                });
                
                requestCount.add(6);
              } else {
                requestCount.add(2);
              }
              
              userApiDuration.add(Date.now() - startTime);
            });
          }
          
          function testMixed() {
            group('Mixed Operations', () => {
              // Basic endpoints
              const homeRes = http.get(`${BASE_URL}/`, {
                tags: { endpoint: 'basic', operation: 'home' },
              });
              check(homeRes, {
                'home 200': (r) => r.status === 200,
                'home has welcome': (r) => r.body.includes('Welcome'),
              });
              
              sleep(0.5);
              
              const helloRes = http.get(`${BASE_URL}/hello?name=K6Test`, {
                tags: { endpoint: 'basic', operation: 'hello' },
              });
              check(helloRes, {
                'hello 200': (r) => r.status === 200,
                'hello has name': (r) => r.body.includes('K6Test'),
              });
              
              sleep(0.5);
              
              const healthRes = http.get(`${BASE_URL}/health`, {
                tags: { endpoint: 'basic', operation: 'health' },
              });
              check(healthRes, {
                'health 200': (r) => r.status === 200,
                'health OK': (r) => r.body === 'OK',
              });
              
              sleep(0.5);
              
              // Random calculator operation
              const ops = ['add', 'subtract', 'multiply', 'divide'];
              const op = ops[getRandomInt(0, ops.length - 1)];
              const a = getRandomInt(1, 50);
              const b = getRandomInt(1, 10);
              
              const calcRes = http.get(`${BASE_URL}/api/calculator/${op}?a=${a}&b=${b}`, {
                tags: { endpoint: 'calculator', operation: op },
              });
              check(calcRes, {
                'mixed calc success': (r) => r.status === 200,
              });
              
              sleep(0.5);
              
              // Get users
              const usersRes = http.get(`${BASE_URL}/api/users`, {
                tags: { endpoint: 'users', operation: 'getAll' },
              });
              check(usersRes, {
                'mixed users success': (r) => r.status === 200,
              });
              
              requestCount.add(5);
            });
          }
          
          export function teardown(data) {
            console.log('✅ Load test completed!');
            console.log(`Started: ${data.startTime}`);
            console.log(`Ended: ${new Date().toISOString()}`);
          }
          
          export function handleSummary(data) {
            const passed = data.metrics.checks.values.passes;
            const failed = data.metrics.checks.values.fails;
            const totalChecks = passed + failed;
            const passRate = ((passed / totalChecks) * 100).toFixed(2);
            
            let summary = '\n';
            summary += '═══════════════════════════════════════════════\n';
            summary += '          k6 PERFORMANCE TEST SUMMARY         \n';
            summary += '═══════════════════════════════════════════════\n\n';
            summary += `Total Requests:      ${data.metrics.http_reqs.values.count}\n`;
            summary += `Failed Requests:     ${data.metrics.http_req_failed.values.passes}\n`;
            summary += `Request Rate:        ${data.metrics.http_reqs.values.rate.toFixed(2)}/s\n`;
            summary += `Data Received:       ${(data.metrics.data_received.values.count / 1024 / 1024).toFixed(2)} MB\n`;
            summary += `Data Sent:           ${(data.metrics.data_sent.values.count / 1024).toFixed(2)} KB\n\n`;
            summary += 'Response Times:\n';
            summary += `  Min:               ${data.metrics.http_req_duration.values.min.toFixed(2)}ms\n`;
            summary += `  Avg:               ${data.metrics.http_req_duration.values.avg.toFixed(2)}ms\n`;
            summary += `  Med:               ${data.metrics.http_req_duration.values.med.toFixed(2)}ms\n`;
            summary += `  P90:               ${data.metrics.http_req_duration.values['p(90)'].toFixed(2)}ms\n`;
            summary += `  P95:               ${data.metrics.http_req_duration.values['p(95)'].toFixed(2)}ms\n`;
            summary += `  P99:               ${data.metrics.http_req_duration.values['p(99)'].toFixed(2)}ms\n`;
            summary += `  Max:               ${data.metrics.http_req_duration.values.max.toFixed(2)}ms\n\n`;
            summary += `Checks:              ${passed}/${totalChecks} (${passRate}%)\n`;
            summary += '═══════════════════════════════════════════════\n';
            
            return {
              'stdout': summary,
              'k6-results.json': JSON.stringify(data, null, 2),
            };
          }
          EOF
          
          echo "✅ k6 load test script created"

      - name: Run k6 load test
        id: k6_test
        run: |
          echo "🚀 Starting k6 load test..."
          k6 run k6-load-test.js 2>&1 | tee k6-output.log
          K6_EXIT_CODE=${PIPESTATUS[0]}
          echo "k6_exit_code=$K6_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $K6_EXIT_CODE -ne 0 ]; then
            echo "⚠️ k6 test had failures (exit code: $K6_EXIT_CODE)"
          else
            echo "✅ k6 test completed successfully"
          fi

      - name: Parse k6 results and create summary
        if: always()
        run: |
          echo "## 📊 k6 Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f k6-results.json ]; then
            # Extract metrics using jq
            TOTAL_REQUESTS=$(jq -r '.metrics.http_reqs.values.count // 0' k6-results.json)
            FAILED_REQUESTS=$(jq -r '.metrics.http_req_failed.values.passes // 0' k6-results.json)
            REQUEST_RATE=$(jq -r '.metrics.http_reqs.values.rate // 0' k6-results.json | xargs printf "%.2f")
            AVG_DURATION=$(jq -r '.metrics.http_req_duration.values.avg // 0' k6-results.json | xargs printf "%.2f")
            P90_DURATION=$(jq -r '.metrics["http_req_duration"].values["p(90)"] // 0' k6-results.json | xargs printf "%.2f")
            P95_DURATION=$(jq -r '.metrics["http_req_duration"].values["p(95)"] // 0' k6-results.json | xargs printf "%.2f")
            P99_DURATION=$(jq -r '.metrics["http_req_duration"].values["p(99)"] // 0' k6-results.json | xargs printf "%.2f")
            MAX_DURATION=$(jq -r '.metrics.http_req_duration.values.max // 0' k6-results.json | xargs printf "%.2f")
            
            CHECKS_PASSED=$(jq -r '.metrics.checks.values.passes // 0' k6-results.json)
            CHECKS_FAILED=$(jq -r '.metrics.checks.values.fails // 0' k6-results.json)
            TOTAL_CHECKS=$((CHECKS_PASSED + CHECKS_FAILED))
            
            if [ $TOTAL_CHECKS -gt 0 ]; then
              CHECK_RATE=$(awk "BEGIN {printf \"%.2f\", ($CHECKS_PASSED / $TOTAL_CHECKS) * 100}")
            else
              CHECK_RATE="0.00"
            fi
            
            echo "### 📈 Key Metrics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Requests | ${TOTAL_REQUESTS} |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed Requests | ${FAILED_REQUESTS} |" >> $GITHUB_STEP_SUMMARY
            echo "| Request Rate | ${REQUEST_RATE}/s |" >> $GITHUB_STEP_SUMMARY
            echo "| Avg Duration | ${AVG_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
            echo "| P90 Duration | ${P90_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
            echo "| P95 Duration | ${P95_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
            echo "| P99 Duration | ${P99_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
            echo "| Max Duration | ${MAX_DURATION}ms |" >> $GITHUB_STEP_SUMMARY
            echo "| Checks Passed | ${CHECKS_PASSED}/${TOTAL_CHECKS} (${CHECK_RATE}%) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Threshold evaluation
            echo "### 🎯 Threshold Status" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # P95 < 500ms
            if (( $(echo "$P95_DURATION < 500" | bc -l) )); then
              echo "✅ **P95 < 500ms:** PASSED (${P95_DURATION}ms)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **P95 < 500ms:** FAILED (${P95_DURATION}ms)" >> $GITHUB_STEP_SUMMARY
            fi
            
            # P99 < 1000ms
            if (( $(echo "$P99_DURATION < 1000" | bc -l) )); then
              echo "✅ **P99 < 1000ms:** PASSED (${P99_DURATION}ms)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **P99 < 1000ms:** FAILED (${P99_DURATION}ms)" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Error rate < 5%
            if [ $TOTAL_REQUESTS -gt 0 ]; then
              ERROR_RATE=$(awk "BEGIN {printf \"%.2f\", ($FAILED_REQUESTS / $TOTAL_REQUESTS) * 100}")
              if (( $(echo "$ERROR_RATE < 5" | bc -l) )); then
                echo "✅ **Error Rate < 5%:** PASSED (${ERROR_RATE}%)" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **Error Rate < 5%:** FAILED (${ERROR_RATE}%)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # Check success rate > 95%
            if (( $(echo "$CHECK_RATE > 95" | bc -l) )); then
              echo "✅ **Check Success > 95%:** PASSED (${CHECK_RATE}%)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Check Success > 95%:** FAILED (${CHECK_RATE}%)" >> $GITHUB_STEP_SUMMARY
            fi
            
          else
            echo "⚠️ k6 results file not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📈 **View detailed metrics in Dynatrace:** [${{ env.DT_TENANT_URL }}](${{ env.DT_TENANT_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Dynatrace Tags:** \`environment=performance-test\`, \`build=${{ github.run_number }}\`, \`test_type=k6\`" >> $GITHUB_STEP_SUMMARY

      - name: Show application logs
        if: always()
        run: |
          echo "📋 Last 100 lines of application log:"
          tail -n 100 app.log || echo "No application log available"

      - name: Stop Spring Boot application
        if: always()
        run: |
          if [ -f app.pid ]; then
            APP_PID=$(cat app.pid)
            echo "Stopping application (PID: $APP_PID)..."
            kill $APP_PID 2>/dev/null || true
            sleep 3
            # Force kill if still running
            kill -9 $APP_PID 2>/dev/null || true
            rm app.pid
          fi

      - name: Upload k6 results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-performance-results
          path: |
            k6-results.json
            k6-output.log
            k6-load-test.js
            app.log

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('k6-results.json')) {
              const results = JSON.parse(fs.readFileSync('k6-results.json', 'utf8'));
              const metrics = results.metrics;
              
              const totalReqs = metrics.http_reqs.values.count;
              const failedReqs = metrics.http_req_failed.values.passes;
              const reqRate = metrics.http_reqs.values.rate.toFixed(2);
              const avgDur = metrics.http_req_duration.values.avg.toFixed(2);
              const p95Dur = metrics.http_req_duration.values['p(95)'].toFixed(2);
              const p99Dur = metrics.http_req_duration.values['p(99)'].toFixed(2);
              
              const checksPassed = metrics.checks.values.passes;
              const checksFailed = metrics.checks.values.fails;
              const totalChecks = checksPassed + checksFailed;
              const checkRate = totalChecks > 0 ? ((checksPassed / totalChecks) * 100).toFixed(2) : 0;
              
              const p95Status = p95Dur < 500 ? '✅' : '❌';
              const p99Status = p99Dur < 1000 ? '✅' : '❌';
              const errorRate = totalReqs > 0 ? ((failedReqs / totalReqs) * 100).toFixed(2) : 0;
              const errorStatus = errorRate < 5 ? '✅' : '❌';
              const checkStatus = checkRate > 95 ? '✅' : '❌';
              
              const comment = `## 🚀 k6 Performance Test Results
              
